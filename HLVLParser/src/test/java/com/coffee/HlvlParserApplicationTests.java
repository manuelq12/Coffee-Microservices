package com.coffee;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
//import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.coffee.controller.Controller;

//import com.coffee.controller.Controller;

@RunWith(SpringRunner.class)
//@SpringBootTest
@WebMvcTest(Controller.class)
@WebAppConfiguration
@ContextConfiguration(classes = HlvlParserApplication.class)
public class HlvlParserApplicationTests {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void testBasicBool() throws Exception {
		String xml = "{\"data\" : \"model empty\\nelements:\\nboolean A\\nboolean B\\nrelations:\\nr1: common(A,B)\"}";

		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);

		MvcResult result = mockMvc.perform(request).andReturn();

		MockHttpServletResponse response = result.getResponse();

		String hlvlResponse = "% Autogenerated code form the Coffee framework\r\n" + "% Author: avillota\r\n"
				+ "% Variables from elements definitions \r\n" + "var bool : A ;\r\n" + "var bool : B ;\r\n"
				+ "% Variables and constraints from the variability relations definition\r\n" + "constraint A == true ;\r\n"
				+ "constraint B == true ;\r\n" + "% The solving parameters from the parameters files\r\n";

		assertEquals(hlvlResponse, response.getContentAsString());
	}
	
	
	@Test
	public void testComplexBool() throws Exception{
		String xml = "{\"data\" : \"model empty\\nelements:\\nboolean A\\nboolean B\\nboolean C\\nboolean D\\nboolean F\\nboolean G\\nrelations:\\nr1: common(A,B)"
				+ "\\nr2: implies((A = B), [C, D])\\nr3: mutex((C OR D), [F,G])\"}";
		
		System.out.println(xml);
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);

		MvcResult result = mockMvc.perform(request).andReturn();

		MockHttpServletResponse response = result.getResponse();

		String hlvlResponse = "% Autogenerated code form the Coffee framework\r\n" + "% Author: avillota\r\n"
				+ "% Variables from elements definitions \r\n" + "var bool : A ;\r\n" + "var bool : B ;\r\n"
				+ "var bool : C ;\r\nvar bool : D ;\r\nvar bool : F ;\r\nvar bool : G ;\r\n"
				+ "% Variables and constraints from the variability relations definition\r\n" + "constraint A == true ;\r\n"
				+ "constraint B == true ;\r\nconstraint (A == B) -> C;\r\nconstraint (A == B) -> D;\r\nconstraint not((C \\/ D) /\\ F);\r\n"
				+ "constraint not((C \\/ D) /\\ G);\r\n" 
				+ "% The solving parameters from the parameters files\r\n";

		
		assertEquals(hlvlResponse, response.getContentAsString());
	
	}
	
	@Test
	public void testModelBasicBool() throws Exception{
		StringBuilder _builder = new StringBuilder();
		  _builder.append("{\"data\" : ");
	      _builder.append("\"model GPL");
	      _builder.append("\\n");
	      _builder.append("elements:");
	      _builder.append("\\n");	      
	      _builder.append("boolean GPL");
	      _builder.append("\\n");	      
	      _builder.append("boolean Gtp");
	      _builder.append("\\n");	      
	      _builder.append("boolean directed");
	      _builder.append("\\n");	      
	      _builder.append("boolean undirected");
	      _builder.append("\\n");	      
	      _builder.append("boolean Weight");
	      _builder.append("\\n");	      
	      _builder.append("boolean weighted");
	      _builder.append("\\n");
	      _builder.append("boolean unweighted");
	      _builder.append("\\n");	      
	      _builder.append("boolean Search");
	      _builder.append("\\n");	      
	      _builder.append("boolean BFS");
	      _builder.append("\\n");	      
	      _builder.append("boolean DFS");
	      _builder.append("\\n");	      
	      _builder.append("boolean Algorithms");
	      _builder.append("\\n");	      
	      _builder.append("boolean connected");
	      _builder.append("\\n");	      
	      _builder.append("boolean stronglyc");
	      _builder.append("\\n");	      
	      _builder.append("boolean cycle");
	      _builder.append("\\n");	      
	      _builder.append("boolean mstprim");
	      _builder.append("\\n");	      
	      _builder.append("boolean mstkruskal");
	      _builder.append("\\n");	      
	      _builder.append("boolean shortest");
	      _builder.append("\\n");
	      _builder.append("relations:");
	      _builder.append("\\n");	      
	      _builder.append("r1: common(GPL)");
	      _builder.append("\\n");	      
	      _builder.append("r2: decomposition(GPL,[Weight, Search], [0,1])");
	      _builder.append("\\n");	      
	      _builder.append("r3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r3X: group(Gtp, [directed, undirected], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r4: group(Weight, [weighted, unweighted], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r5: group(Search, [BFS, DFS], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
	      _builder.append("\\n");      
	      _builder.append("r7: implies(mstprim, unweighted)");
	      _builder.append("\\n");      
	      _builder.append("r8: mutex(stronglyc, shortest)");
	      _builder.append("\\n");	      
	      _builder.append("r9: expression(undirected OR ~mstprim)");
	      _builder.append("\\n"); 
	      _builder.append("r10: expression(directed OR ~shortest)");
	      _builder.append("\\n");	      
	      _builder.append("r11: expression( ~mstprim OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r12: expression( unweighted OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r13: expression( undirected OR ~stronglyc )");
	      _builder.append("\\n");	      
	      _builder.append("r14: expression( ~connected OR ~stronglyc )");
	      _builder.append("\\n");	      
	      _builder.append("r15: expression( Search OR ~connected )");
	      _builder.append("\\n");	      
	      _builder.append("r16: expression( undirected OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r17: expression( ~mstkruskal OR ~shortest )");
	      _builder.append("\\n");	      
	      _builder.append("r18: expression( DFS OR ~cycle )");
	      _builder.append("\\n");	      
	      _builder.append("r19: expression( ~mstprim OR ~shortest)");
	      _builder.append("\"}");

	      StringBuilder _builder_1 = new StringBuilder();
	      _builder_1.append("% Autogenerated code form the Coffee framework");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Author: avillota");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables from elements definitions ");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : GPL ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : Gtp ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : directed ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : undirected ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : Weight ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : weighted ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : unweighted ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : Search ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : BFS ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : DFS ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : Algorithms ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : connected ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : stronglyc ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : cycle ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : mstprim ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : mstkruskal ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var bool : shortest ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables and constraints from the variability relations definition");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint GPL == true ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint Weight -> GPL ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint Search -> GPL ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint GPL <-> Gtp ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint GPL <-> Algorithms ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint directed <-> (not(undirected) /\\ Gtp) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint undirected <-> (not(directed) /\\ Gtp) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint weighted <-> (not(unweighted) /\\ Weight) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint unweighted <-> (not(weighted) /\\ Weight) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint BFS <-> (not(DFS) /\\ Search) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint DFS <-> (not(BFS) /\\ Search) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint Algorithms <-> ( connected \\/ stronglyc \\/ cycle \\/ mstprim \\/ mstkruskal \\/ shortest ) ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint mstprim -> unweighted ;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint not (stronglyc /\\ shortest);");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (undirected \\/ not(mstprim));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (directed \\/ not(shortest));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (not(mstprim) \\/ not(mstkruskal));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (unweighted \\/ not(mstkruskal));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (undirected \\/ not(stronglyc));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (not(connected) \\/ not(stronglyc));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (Search \\/ not(connected));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (undirected \\/ not(mstkruskal));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (not(mstkruskal) \\/ not(shortest));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (DFS \\/ not(cycle));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (not(mstprim) \\/ not(shortest));");
	      _builder_1.append("\r\n");
	      _builder_1.append("% The solving parameters from the parameters files");
	      _builder_1.append("\r\n");

		String xml = _builder.toString();
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);
		
		MvcResult result = mockMvc.perform(request).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		
		String hlvlResponse = _builder_1.toString();
		
		assertEquals(hlvlResponse, response.getContentAsString());
		
	}

	@Test
	public void testModelBasicIntegerParser() throws Exception{
		StringBuilder _builder = new StringBuilder();
		  _builder.append("{\"data\" : ");
	      _builder.append("\"model GPL");
	      _builder.append("\\n");
	      _builder.append("elements:");
	      _builder.append("\\n");	      
	      _builder.append("boolean GPL");
	      _builder.append("\\n");	      
	      _builder.append("boolean Gtp");
	      _builder.append("\\n");	      
	      _builder.append("boolean directed");
	      _builder.append("\\n");	      
	      _builder.append("boolean undirected");
	      _builder.append("\\n");	      
	      _builder.append("boolean Weight");
	      _builder.append("\\n");	      
	      _builder.append("boolean weighted");
	      _builder.append("\\n");
	      _builder.append("boolean unweighted");
	      _builder.append("\\n");	      
	      _builder.append("boolean Search");
	      _builder.append("\\n");	      
	      _builder.append("boolean BFS");
	      _builder.append("\\n");	      
	      _builder.append("boolean DFS");
	      _builder.append("\\n");	      
	      _builder.append("boolean Algorithms");
	      _builder.append("\\n");	      
	      _builder.append("boolean connected");
	      _builder.append("\\n");	      
	      _builder.append("boolean stronglyc");
	      _builder.append("\\n");	      
	      _builder.append("boolean cycle");
	      _builder.append("\\n");	      
	      _builder.append("boolean mstprim");
	      _builder.append("\\n");	      
	      _builder.append("boolean mstkruskal");
	      _builder.append("\\n");	      
	      _builder.append("boolean shortest");
	      _builder.append("\\n");
	      _builder.append("relations:");
	      _builder.append("\\n");	      
	      _builder.append("r1: common(GPL)");
	      _builder.append("\\n");	      
	      _builder.append("r2: decomposition(GPL,[Weight, Search], [0,1])");
	      _builder.append("\\n");	      
	      _builder.append("r3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r3X: group(Gtp, [directed, undirected], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r4: group(Weight, [weighted, unweighted], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r5: group(Search, [BFS, DFS], [1,1])");
	      _builder.append("\\n");	      
	      _builder.append("r6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
	      _builder.append("\\n");      
	      _builder.append("r7: implies(mstprim, unweighted)");
	      _builder.append("\\n");      
	      _builder.append("r8: mutex(stronglyc, shortest)");
	      _builder.append("\\n");	      
	      _builder.append("r9: expression(undirected OR ~mstprim)");
	      _builder.append("\\n"); 
	      _builder.append("r10: expression(directed OR ~shortest)");
	      _builder.append("\\n");	      
	      _builder.append("r11: expression( ~mstprim OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r12: expression( unweighted OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r13: expression( undirected OR ~stronglyc )");
	      _builder.append("\\n");	      
	      _builder.append("r14: expression( ~connected OR ~stronglyc )");
	      _builder.append("\\n");	      
	      _builder.append("r15: expression( Search OR ~connected )");
	      _builder.append("\\n");	      
	      _builder.append("r16: expression( undirected OR ~mstkruskal )");
	      _builder.append("\\n");	      
	      _builder.append("r17: expression( ~mstkruskal OR ~shortest )");
	      _builder.append("\\n");	      
	      _builder.append("r18: expression( DFS OR ~cycle )");
	      _builder.append("\\n");	      
	      _builder.append("r19: expression( ~mstprim OR ~shortest)");
	      _builder.append("\"}");

	      StringBuilder _builder_1 = new StringBuilder();
			_builder_1.append("% Autogenerated code form the Coffee framework");
		      _builder_1.append("\r\n");
		      _builder_1.append("% Author: avillota");
		      _builder_1.append("\r\n");
		      _builder_1.append("% Variables from elements definitions ");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: GPL;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: Gtp;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: directed;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: undirected;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: Weight;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: weighted;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: unweighted;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: Search;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: BFS;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: DFS;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: Algorithms;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: connected;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: stronglyc;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: cycle;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: mstprim;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: mstkruskal;");
		      _builder_1.append("\r\n");
		      _builder_1.append("var 0..1: shortest;");
		      _builder_1.append("\r\n");
		      _builder_1.append("% Variables and constraints from the variability relations definition");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint GPL == 1;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint GPL >= Weight;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint GPL >= Search;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint GPL == Gtp;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint GPL == Algorithms;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint Gtp <= directed + undirected ;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint directed + undirected  <= Gtp;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint Weight <= weighted + unweighted ;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint weighted + unweighted  <= Weight;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint Search <= BFS + DFS ;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint BFS + DFS  <= Search;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint Algorithms <= connected + stronglyc + cycle + mstprim + mstkruskal + shortest ;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint connected + stronglyc + cycle + mstprim + mstkruskal + shortest  <= 6 * Algorithms;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint mstprim <= unweighted;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint stronglyc + shortest <= 1 ;");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (undirected > 0 \\/ not(mstprim > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (directed > 0 \\/ not(shortest > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (not(mstprim > 0) \\/ not(mstkruskal > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (unweighted > 0 \\/ not(mstkruskal > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (undirected > 0 \\/ not(stronglyc > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (not(connected > 0) \\/ not(stronglyc > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (Search > 0 \\/ not(connected > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (undirected > 0 \\/ not(mstkruskal > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (not(mstkruskal > 0) \\/ not(shortest > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (DFS > 0 \\/ not(cycle > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("constraint (not(mstprim > 0) \\/ not(shortest > 0));");
		      _builder_1.append("\r\n");
		      _builder_1.append("% The solving parameters from the parameters files");
		      _builder_1.append("\r\n");

		String xml = _builder.toString();
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);
		
		MvcResult result = mockMvc.perform(request).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		
		String hlvlResponse = _builder_1.toString();
		
		assertEquals(hlvlResponse, response.getContentAsString());
	}
	
	@Test
	public void testOVNModelAttributeDialect() throws Exception{
		StringBuilder _builder = new StringBuilder();
		  _builder.append("{\"data\" : ");
	      _builder.append("\"model RFW");
	      _builder.append("\\n");
	      _builder.append("elements:");
	      _builder.append("\\n");	      
	      _builder.append("symbolic VP1");
	      _builder.append("\\n");	      
	      _builder.append("variants: [\'medium-class car\', \'upper-class car\', \'small truck\', \'big truck\']");
	      _builder.append("\\n");	      
	      _builder.append("comment:{\'Type of vehicle\'}");
	      _builder.append("\\n");	      
	      _builder.append("symbolic VP2");
	      _builder.append("\\n");	      
	      _builder.append("variants: [\'switchable\', \'durable\'] ");
	      _builder.append("\\n");	      
	      _builder.append("comment:{\'Activation\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  VP3 comment:{\'Comfort functions\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  v7 comment:{\'Non stopping warning\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  v8 comment:{\'Overspeed warning\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  VP4 comment:{\'Other signs\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  v41 comment:{\'Road w/right of way start\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  v42 comment:{\'city limit\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  VP5 comment:{\'Prohibition signs\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  V51 comment:{\'No vehicles\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean  V52 comment:{\'No cars\'}");
	      _builder.append("\\n");
	      _builder.append("relations:");
	      _builder.append("\\n");	      
	      _builder.append("r1: common(VP1, VP2, VP3)");
	      _builder.append("\\n");	      
	      _builder.append("d1: decomposition(VP5, [V51, V52], [0,1])");
	      _builder.append("\\n");	      
	      _builder.append("d2: decomposition(VP4, [v41, v42], [0,1])");
	      _builder.append("\\n");	      
	      _builder.append("d3: decomposition(VP3, [v7, v8], [0,1])");
	      _builder.append("\\n");	      
	      _builder.append("exp1: expression(VP1 =\'big truck\' => VP2 =\'durable\')");
	      _builder.append("\\n");	      
	      _builder.append("imp1: implies((VP1 =\'medium-class car\'), [V51,V52])");
	      _builder.append("\\n");	      
	      _builder.append("imp2: implies(v8, v42)");
	      _builder.append("\"}");

	      StringBuilder _builder_1 = new StringBuilder();
	      _builder_1.append("% Autogenerated code form the Coffee framework");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Author: avillota");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables from elements definitions ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Mapping  variants to integers");
	      _builder_1.append("\r\n");
	      _builder_1.append("var {1 , 2 , 3 , 4 }  : VP1;");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Map: medium-class car -> 1,  upper-class car -> 2,  small truck -> 3,  big truck -> 4,  ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Mapping  variants to integers");
	      _builder_1.append("\r\n");
	      _builder_1.append("var {1 , 2 }  : VP2;");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: VP3;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: v7;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: v8;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: VP4;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: v41;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: v42;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: VP5;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: V51;");
	      _builder_1.append("\r\n");
	      _builder_1.append("var 0..1: V52;");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables and constraints from the variability relations definition");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP1 == 1;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP2 == 1;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP3 == 1;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP5 >= V51;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP5 >= V52;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP4 >= v41;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP4 >= v42;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP3 >= v7;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint VP3 >= v8;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint ((VP1 == 4)  -> (VP2 == 2));");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (VP1 == 1) -> V51;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint (VP1 == 1) -> V52;");
	      _builder_1.append("\r\n");
	      _builder_1.append("constraint v8 <= v42;");
	      _builder_1.append("\r\n");
	      _builder_1.append("% The solving parameters from the parameters files");
	      _builder_1.append("\r\n");

		String xml = _builder.toString();
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);
		
		MvcResult result = mockMvc.perform(request).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		
		String hlvlResponse = _builder_1.toString();
		
		assertEquals(hlvlResponse, response.getContentAsString());
	}
	
	
	//TODO Test failed, Why?
	@Test
	public void testDoplerModelAttributeDialect() throws Exception{
		StringBuilder _builder = new StringBuilder();
		  _builder.append("{\"data\" : ");
	      _builder.append("\"model Dopler");
	      _builder.append("\\n");
	      _builder.append("elements:");
	      _builder.append("\\n");	      
	      _builder.append("symbolic scope variants: [\'assemble yourself\', \'complete suite\']");
	      _builder.append("\\n");
	      _builder.append("comment: {\'What to buy?\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean glossary comment:{\'Include glossary?\'}");
	      _builder.append("\\n");	      
	      _builder.append("symbolic resolution variants:[\'800x600\', \'\']");
	      _builder.append("\\n");
	      _builder.append("comment:{\'Default resolution?\'}");
	      _builder.append("\\n");	      
	      _builder.append("integer width comment:{\'Width?\'}");
	      _builder.append("\\n");	      
	      _builder.append("boolean tools");
	      _builder.append("\\n");	      
	      _builder.append("boolean configurationWizard");
	      _builder.append("\\n");	      
	      _builder.append("boolean decisionKing");
	      _builder.append("\\n");	      
	      _builder.append("boolean projectKing");
	      _builder.append("\\n");
	      _builder.append("relations:");
	      _builder.append("\\n");
	      _builder.append("c1: common(tools)");
	      _builder.append("\\n");	      
	      _builder.append("g1: group(tools, [configurationWizard, decisionKing, projectKing], [1,3])");
	      _builder.append("\\n");	      
	      _builder.append("val1: expression(width >= 800 AND width <= 1680)");
	      _builder.append("\\n");	      
	      _builder.append("e1: expression(resolution=\'800x600\' => width = 800)   ");
	      _builder.append("\\n");	      
	      _builder.append("vis1: visibility(configurationWizard=true, [resolution])");
	      _builder.append("\\n");	      
	      _builder.append("vis2: visibility(entailed(scope), [glossary])");
	      _builder.append("\\n");	      
	      _builder.append("vis3: visibility(scope=\'assemble yourself\', [glossary])");
	      _builder.append("\"}");

	      StringBuilder _builder_1 = new StringBuilder();
	      _builder_1.append("% Autogenerated code form the Coffee framework");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Author: avillota");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables from elements definitions ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables and constraints from the variability relations definition");
	      _builder_1.append("\r\n");
	      _builder_1.append("% The solving parameters from the parameters files");

		String xml = _builder.toString();
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);
		
		MvcResult result = mockMvc.perform(request).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		
		String hlvlResponse = _builder_1.toString();
		
		assertEquals(hlvlResponse, response.getContentAsString());
	}
	
	
	//TODO Test failed, Why?
	@Test
	public void testEShopModelMultiplicityDialect() throws Exception{
		StringBuilder _builder = new StringBuilder();
		  _builder.append("{\"data\" : ");
	      _builder.append("\"model eShop");
	      _builder.append("\\n");
	      _builder.append("elements:");
	      _builder.append("\\n");
	      _builder.append("boolean connectionType");
	      _builder.append("\\n");
	      _builder.append("boolean secureConnection");
	      _builder.append("\\n");
	      _builder.append("boolean insecureConnection");
	      _builder.append("\\n");
	      _builder.append("boolean payment");
	      _builder.append("\\n");
	      _builder.append("boolean payPal");
	      _builder.append("\\n");
	      _builder.append("symbolic customerType variants: [ \'sporadic\' , \'regular\' ]");
	      _builder.append("\\n");
	      _builder.append("comment: { \'This element represents the customer type\'}");
	      _builder.append("\\n");
	      _builder.append("att integer confidentiality variants: 1 .. 5 ");
	      _builder.append("\\n");
	      _builder.append("att integer confBounded is 2 ");
	      _builder.append("\\n");
	      _builder.append("boolean customerProfile ");
	      _builder.append("\\n");
	      _builder.append("boolean SMS ");
	      _builder.append("\\n");
	      _builder.append("boolean card ");
	      _builder.append("\\n");
	      _builder.append("boolean creditCard");
	      _builder.append("\\n");
	      _builder.append("boolean giftCard");
	      _builder.append("\\n");
	      _builder.append("boolean debitCard");
	      _builder.append("\\n");
	      _builder.append("boolean implementation");
	      _builder.append("\\n");
	      _builder.append("boolean appServer");
	      _builder.append("\\n");
	      _builder.append("boolean machines");
	      _builder.append("\\n");
	      _builder.append("att integer certificateType variants: 1 .. 5 ");
	      _builder.append("\\n");
	      _builder.append("symbolic productType variants: [ \'services\' , \'products\' ]");
	      _builder.append("\\n");
	      _builder.append("relations:");
	      _builder.append("\\n");
	      _builder.append("com1 : common ( customerType , payment )");
	      _builder.append("\\n");
	      _builder.append("exp1 : expression ( 3 <= card . confidentiality AND card . confidentiality <= 5 )");
	      _builder.append("\\n");
	      _builder.append("m1 : mutex (creditCard , insecureConnection)");
	      _builder.append("\\n");
	      _builder.append("m2 : mutex ((customerType = \'sporadic\') ,[giftCard , creditCard])");
	      _builder.append("\\n");
	      _builder.append("imp1 : implies (payPal , secureConnection) ");
	      _builder.append("\\n");
	      _builder.append("imp2 : implies ((customerType = \'regular\'), [secureConnection, customerProfile])");
	      _builder.append("\\n");
	      _builder.append("dc1 : decomposition (card, [giftCard ,debitCard] ,[0 , 1])");
	      _builder.append("\\n");
	      _builder.append("dc2 : decomposition (card, [creditCard] ,[1 , 1])");
	      _builder.append("\\n");
	      _builder.append("dc3 : decomposition (implementation ,[appServer] ,[1 , 5])");
	      _builder.append("\\n");
	      _builder.append("dc4 : decomposition (implementation ,[machines] ,[2 , 10]) ");
	      _builder.append("\\n");
	      _builder.append("att1 : decomposition (payPal , [confidentiality ,certificateType] ,[ 1 , 1])");
	      _builder.append("\\n");
	      _builder.append("att3 : decomposition (card , [confidentiality ,certificateType] ,[ 1 , 1 ])");
	      _builder.append("\\n");
	      _builder.append("g1 : group (payment ,[payPal ,card] ,[1 ,*])");
	      _builder.append("\\n");
	      _builder.append("v1 : visibility (productType = \'services\' ,[implementation ,appServer ,machines])");
	      _builder.append("\"}");

	      StringBuilder _builder_1 = new StringBuilder();
	      _builder_1.append("% Autogenerated code form the Coffee framework");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Author: avillota");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables from elements definitions ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
	      _builder_1.append("\r\n");
	      _builder_1.append("% Variables and constraints from the variability relations definition");
	      _builder_1.append("\r\n");
	      _builder_1.append("% The solving parameters from the parameters files");
	      _builder_1.append("\r\n");

		String xml = _builder.toString();
		
		RequestBuilder request = MockMvcRequestBuilders.post("/coffeeHLVLP/hlvlParser").content(xml)
				.contentType(MediaType.APPLICATION_JSON_VALUE).accept(MediaType.TEXT_PLAIN_VALUE);
		
		MvcResult result = mockMvc.perform(request).andReturn();
		
		MockHttpServletResponse response = result.getResponse();
		
		String hlvlResponse = _builder_1.toString();
		
		assertEquals(hlvlResponse, response.getContentAsString());
	}
	
}
